#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 10
#define NUM_NAVIOS 7 // n√∫mero de navios (7)

const char *ARQUIVO_USUARIOS = "usuarios.txt"; // arquivo de usu√°rios em txt

// Defini√ß√£o das cores (C√≥digos ANSI)
const char *BRed = "\033[1;31m";   // Cor vermelha 
const char *BGreen = "\033[1;32m"; // Cor verde 
const char *reset = "\033[0m";     // Reset de cores (voltar ao padr√£o)

// Armazenar informa√ß√µes do usu√°rio
typedef struct {
  char nome[50];  
  char senha[50];
} Usuario;

// Coordenadas
typedef struct {
  int x;
  int y;
} Coordenada;

// Navios
typedef struct {
  int linha;
  int coluna;
} Navio;

// Prototipa√ß√£o das fun√ß√µes
int login_usuario();
void cadastrar_usuario();
int menu();
int menu_pos_login();
void exibirTabuleiroJogador(char tabuleiro[SIZE][SIZE]);
void exibirTabuleiroBot(char tabuleiro[SIZE][SIZE]);
void insereNaviosJogador(int **tabuleiro, Navio *navios);
void posicaoBot(
    Coordenada *naviosBot); // fun√ß√£o para gerar posi√ß√µes do bot

int menu() {
  int opcao;

  printf("\n Escolha uma op√ß√£o: \n");
  printf("1 - Novo jogo \n");
  printf("2 - Configura√ß√£o \n");
  printf("3 - Ajuda \n");
  printf("4 - Sair \n");
  printf("Digite a op√ß√£o escolhida: ");

  scanf("%d", &opcao);

  while ((opcao != 1) && (opcao != 2) && (opcao != 3) && (opcao != 4)) {
    printf("Op√ß√£o inv√°lida. Tente novamente: ");
    scanf("%d", &opcao);
  }

  return opcao;
}


void ajuda() {
  printf("\n Bem-vindo √† ajuda do jogo! \n");
  printf("O objetivo √© acertar todos os navios inimigos escondidos no tabuleiro.\n");
  printf("Voc√™ dever√° inserir coordenadas para tentar acertar os navios.\n");
  printf("Boa sorte!\n");

  printf("\nPressione <ENTER> para voltar ao menu.\n");
  getchar(); // Captura o ENTER
  getchar(); // Captura o ENTER extra gerado pelo scanf anterior
}

void sair() {
    printf("\nAt√© logo! Espero que tenha gostado da batalha!üö¢\n");
    printf("%s", reset); // reset cores
}

//quantidade de navios e quantidade de tentativas ficam aqui 
void set (int *t, int *n){
  do {
      printf("\nDigite a quantidade de NAVIOS <3>: ");
      scanf("%d", n);
      if((*n < 1) || (*n > 10)){ 
        printf("%s", BRed); // vermelho
        printf("A quantidade de NAVIOS precisa ser >= 1 e <= 10.");
        printf("%s", reset); // reset cores
      }
    } while((*n < 1) || (*n > 10));

    do {
      printf("\nDigite a quantidade de TENTATIVAS <10>: ");
      scanf("%d", t);
      if((*t < 1) || (*t < *n)){  // Corrigido para garantir que t >= n
        printf("%s", BRed); // vermelho
        printf("A quantidade de TENTATIVAS precisa ser >= 1 e >= a quantidade de NAVIOS (%d).", *n);
        printf("%s", reset); // reset cores
      }
    } while((*t < 1) || (*t < *n)); // Limite das tentativas

    printf("\n\n-----------------------------------%s", BRed); // vermelho
    printf("\nNAVIOS = %d\nTENTATIVAS = %d.\nConfigura√ß√£o efetuada com sucesso!\n", *n, *t);
    printf("%s-----------------------------------", reset); // reset cores
}

int main() {
    int tentativas, navios;
    set(&tentativas, &navios);
    return 0;
}

//verificar se a coordenada escolhida vai existir mesmo
int verifica_navio(int n, int l, int c, Navio *navios){
  int i, v = 0;
  for(i=0;i<n;i++){
    if((navios[i].linha == l) && (navios[i].coluna == c)){
      v = 1;
    }
  }
  return v;
}

// Fun√ß√£o para imprimir o tabuleiro
void imprime_tabuleiro(int linhas, int colunas, int **tabuleiro) {
  printf("\nTabuleiro:\n");
  for (int i = 0; i < linhas; i++) {
    for (int j = 0; j < colunas; j++) {
      if (tabuleiro[i][j] == -1) {
        printf("~ "); // √°gua
      } else if (tabuleiro[i][j] == 0) {
        printf("%sX %s", BRed, reset); // Erro
      } else if (tabuleiro[i][j] == 1) {
        printf("%sN %s", BGreen, reset); // Navio acertado
      }
    }
    printf("\n");
  }
}

void print_navios (){

}


//Come√ßando a fun√ß√£o jogar (CONTINUAR ESSE AINDA!!)
void jogar(int t, int n){
    Navio *nav = cria_navios(n); //cria os navios e adiciona as coordenadas aleat√≥rias
    int **tabuleiro;
    tabuleiro = cria_tabuleiro(MAX,MAX); //cria o tabuleiro 
    preenche_tabuleiro(MAX,MAX,tabuleiro); //inicializa o tabuleiro com -1
    int tt = t; //tt: armazena o n√∫mero de tentativas total
    int l, c, acerto = 0; //n√∫mero de acertos
  
}
