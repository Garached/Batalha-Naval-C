#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 10
#define NUM_NAVIOS 7 // número de navios (7)

const char *ARQUIVO_USUARIOS = "usuarios.txt"; // arquivo de usuários em txt

// Definição das cores (Códigos ANSI)
const char *BRed = "\033[1;31m";   // Cor vermelha 
const char *BGreen = "\033[1;32m"; // Cor verde 
const char *reset = "\033[0m";     // Reset de cores (voltar ao padrão)

// Armazenar informações do usuário
typedef struct {
  char nome[50];  
  char senha[50];
} Usuario;

// Coordenadas
typedef struct {
  int x;
  int y;
} Coordenada;

// Navios
typedef struct {
  int linha;
  int coluna;
} Navio;

// Prototipação das funções
int login_usuario();
void cadastrar_usuario();
int menu();
int menu_pos_login();
void exibirTabuleiroJogador(char tabuleiro[SIZE][SIZE]);
void exibirTabuleiroBot(char tabuleiro[SIZE][SIZE]);
void insereNaviosJogador(int **tabuleiro, Navio *navios);
void posicaoBot(
    Coordenada *naviosBot); // função para gerar posições do bot

// Menu principal
int menu() {
  int opcao;

  do {
    printf("Escolha uma opção:\n");
    printf("1 - Cadastrar Usuário\n");
    printf("2 - Fazer Login\n");
    printf("3 - Sair\n");
    printf("Digite a opção escolhida: ");
    scanf("%d", &opcao);

    if (opcao == 1) {
      cadastrar_usuario();
    } else if (opcao == 2) {
      if (login_usuario()) { // Verifique se o login foi bem-sucedido
        return 1;            // Retorna 1 para indicar login bem-sucedido
      }
    }
  } while (opcao != 3);

  printf("Saindo...\n");
  return 0; // Retorna 0 para indicar saída
}

// Função para exibir o tabuleiro do jogador
void exibirTabuleiroJogador(char tabuleiro[SIZE][SIZE]) {
  printf("Tabuleiro do Jogador:\n");
  printf("   ");
  for (int i = 1; i <= SIZE; i++) {
    printf(" %d", i);
  }
  printf("\n");

  for (int i = 0; i < SIZE; i++) {
    printf("%2d ", i + 1);
    for (int j = 0; j < SIZE; j++) {
      printf(" %c", tabuleiro[i][j]);
    }
    printf("\n");
  }
}

// Função para exibir o tabuleiro do bot
void exibirTabuleiroBot(char tabuleiro[SIZE][SIZE]) {
  printf("Tabuleiro do Bot:\n");
  printf("   ");
  for (int i = 1; i <= SIZE; i++) {
    printf(" %d", i);
  }
  printf("\n");

  for (int i = 0; i < SIZE; i++) {
    printf("%2d ", i + 1);
    for (int j = 0; j < SIZE; j++) {
      printf(" %c", tabuleiro[i][j]);
    }
    printf("\n");
  }
}

//arruma a partir daqui
int main() {
    int tentativas, navios;
    set(&tentativas, &navios);
    return 0;
}

//verificar se a coordenada escolhida vai existir mesmo
int verifica_navio(int n, int l, int c, Navio *navios){
  int i, v = 0;
  for(i=0;i<n;i++){
    if((navios[i].linha == l) && (navios[i].coluna == c)){
      v = 1;
    }
  }
  return v;
}

// Função para imprimir o tabuleiro
void imprime_tabuleiro(int linhas, int colunas, int **tabuleiro) {
  printf("\nTabuleiro:\n");
  for (int i = 0; i < linhas; i++) {
    for (int j = 0; j < colunas; j++) {
      if (tabuleiro[i][j] == -1) {
        printf("~ "); // água
      } else if (tabuleiro[i][j] == 0) {
        printf("%sX %s", BRed, reset); // Erro
      } else if (tabuleiro[i][j] == 1) {
        printf("%sN %s", BGreen, reset); // Navio acertado
      }
    }
    printf("\n");
  }
}

void print_navios (){

}


//Começando a função jogar (CONTINUAR ESSE AINDA!!)
void jogar(int t, int n){
    Navio *nav = cria_navios(n); //cria os navios e adiciona as coordenadas aleatórias
    int **tabuleiro;
    tabuleiro = cria_tabuleiro(MAX,MAX); //cria o tabuleiro 
    preenche_tabuleiro(MAX,MAX,tabuleiro); //inicializa o tabuleiro com -1
    int tt = t; //tt: armazena o número de tentativas total
    int l, c, acerto = 0; //número de acertos
  
}
