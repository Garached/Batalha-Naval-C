#include <stdio.h>
#include <time.h>
#include <stdlib.h> 
#include "cores.h" //n sei ainda se poe, seria pra quando acerta ou erra (verde, vermelho)

#define MAX 10 //matriz 10x10

//Estrutura para navios. Cada navio tem uma coordenada linhaxcoluna
typedef struct navio{ 
  int linha;  
  int coluna; 
}

// Definição das cores (Códigos ANSI)
const char *BRed = "\033[1;31m";   // Cor vermelha em negrito
const char *reset = "\033[0m";     // Reset de cores (voltar ao padrão)

int menu(); //Opções do menu . Usa int pq retorna um valor do tipo inteiro que é necessário pro programa
void ajuda(); //Informações de como jogar  
void set(int *t, int *n); //Atualização do número de tentativas e navios
void jogar(int t, int n); //Função para jogar
void sair(); //Mensagem de despedida

int menu () {
    int opcao;

    printf("\n Escolha uma opção: \n");
    printf("1 - Novo jogo \n");
    printf("2 - Configuração \n");
    printf("3 - Ajuda \n");
    printf("4 - Sair \n");
    printf("Digite a opção escolhida: ");
    
    scanf("%d", &opcao);

    while((opcao != 1) && (opcao != 2) && (opcao != 3) && (opcao != 4));
    return opcao;   
    
}

void ajuda(){
    int opcao;
  
    printf("\n Bem-vindo à ajuda do jogo! \n");
    printf("O objetivo é acertar todos os navios inimigos escondidos no tabuleiro. \n");
    printf("Você deverá inserir coordenadas para tentar acertar os navios. \n"); //Aqui explicar melhor dps
    printf("Boa sorte! \n");

    printf("\n\n");
    printf("Pressione <ENTER> para voltar ao menu.");

    scanf("\n"); // ou é getchar()? 
  
}

//quantidade de navios e quantidade de tentativas ficam aqui 
void set (int *t, int *n){
  do {
      printf("\nDigite a quantidade de NAVIOS <3>: ");
      scanf("%d", n);
      if((*n < 1) || (*n > 10)){ 
        printf("%s", BRed); // vermelho
        printf("A quantidade de NAVIOS precisa ser >= 1 e <= 10.");
        printf("%s", reset); // reset cores
      }
    } while((*n < 1) || (*n > 10));

    do {
      printf("\nDigite a quantidade de TENTATIVAS <10>: ");
      scanf("%d", t);
      if((*t < 1) || (*t < *n)){  // Corrigido para garantir que t >= n
        printf("%s", BRed); // vermelho
        printf("A quantidade de TENTATIVAS precisa ser >= 1 e >= a quantidade de NAVIOS (%d).", *n);
        printf("%s", reset); // reset cores
      }
    } while((*t < 1) || (*t < *n)); // Limite das tentativas

    printf("\n\n-----------------------------------%s", BRed); // vermelho
    printf("\nNAVIOS = %d\nTENTATIVAS = %d.\nConfiguração efetuada com sucesso!\n", *n, *t);
    printf("%s-----------------------------------", reset); // reset cores
}

int main() {
    int tentativas, navios;
    set(&tentativas, &navios);
    return 0;
}

//verificar se a coordenada escolhida vai existir mesmo
int verifica_navio(int n, int l, int c, Navio *navios){
  int i, v = 0;
  for(i=0;i<n;i++){
    if((navios[i].linha == l) && (navios[i].coluna == c)){
      v = 1;
    }
  }
  return v;
}

void print_navios (){

}

int cria_tabuleiro (){

} //tem que salvar as informações do usuario e depois imprimer o tabuleiro preenchido

//Começando a função jogar (CONTINUAR ESSE AINDA!!)
void jogar(int t, int n){
    Navio *nav = cria_navios(n); //cria os navios e adiciona as coordenadas aleatórias
    int **tabuleiro;
    tabuleiro = cria_tabuleiro(MAX,MAX); //cria o tabuleiro 
    preenche_tabuleiro(MAX,MAX,tabuleiro); //inicializa o tabuleiro com -1
    int tt = t; //tt: armazena o número de tentativas total
    int l, c, acerto = 0; //número de acertos
  
}
